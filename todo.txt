Look in /pm-template by default.
But content.md is always sourced from the pm-src folder itself.
    If "content.md" was invoked but no content.md was provided, a lorem ipsum text will be inserted instead.
"template" can be defined in the front matter.
maybe content.md isn't the only thing read from the current directory. All non-directory .md files are sourced from the current directory directory.
    why? so users can override multiple blocks in their templates (but usually it's just content.md).
    .md accepts all html so we can use .md as an indication that a template is an overrideable block.

a database and an fs.FS
How to protect sensitive config information? Should it all be stored on the fs.FS?

If no DB is provided:
- Check if -pm-dsn1 was set.
- Else fall back to an SQLite database created in the inferred $DATA_DIR.
    - If $DATA_DIR was not inferred (i.e. an FS was passed in), return an error saying no database was provided.

pm.Template tests
test dirname URL
test filename URL
test read html from pm-template
test read md from workingDir
test missing md in workingDir gives lorem ipsum

{{ range $entry := source "github.com/pagemanager/pagemanager.Index" "lastModified DESC" }}
    {{ $data := load (pathJoin $entry "data.toml") }}
    {{ $entry.name }}
    {{ $entry.lastModified }}
    {{ $entry.title }}
    {{ $entry.summary }}
    {{ $entry.by }}
    {{ $entry.date }}
    {{ $entry.published }}
{{ end }}
{{ $data := load "github.com/bokwoon95/plainsimple/linode_header.toml" }}
    first search in pm-src/github.com/bokwoon95/plainsimple/linode_header.toml, then pm-template/github.com/bokwoon95/plainsimple/linode_header.toml
    this allows users to copy paste linode_header.toml from pm-template into pm-src, then make the necessary changes.
    so all of a sudden templates can use load as well, complete with user-tweakable menu bars and shit.
{{ range $data.products }}
{{ end }}
{{ range $data.pricing }}
{{ end }}
{{ range $data.career }}
{{ end }}
{{ pathJoin domain subdomain tildePrefix langCode "/abcdef" }}
templates can do this, but markdown content cannot. In markdown you have to hardcode the domain, subdomain and tildePrefix into a link. with markdown it's not really a problem because they are already selected based on the current langCode so you don't ever have to think about it (each content.md already operates with an implicit langCode in the context).
What if you need a different sort order?
oh no this is awful. I have to provide some way for markdown to automatically inject the domain, subdomain, tildePrefix and langCode into their links. Either I crawl all links in both markdown and html and convert

being able to filter on $entry tags essentially gives you taxonomies for free.

{{ $pages := getPages "/writing" "ORDER BY name ASC, lastModifier DESC" }}

pm.template() must hardcode the domain, subdomain, tildePrefix and langcode into the template functions.
This is because each fully-assembled template already makes assumptions about which language-specific template are used e.g. content.en.md
{{ coalesce lang.homeHero "" }}
{{ getPages .PathName "-sort" "-filter" }}

{{ $lang := load "github.com/bokwoon95/plainsimple/lang.toml" }}
{{ or lang.title $lang.title | safeHTML }}
rather than using coalesce to provide a lang default, templates are able to define their own lang.toml which will be used as the default fallback (means lang is first populated from the template's)
TODO: darn, the problem with using coalesce to provide language defaults is that you have to define a default at every call site, as compared to aggregating it into a toml file where it can be reused over and over.
TODO: darn, the problem with using a theme-specific lang.toml is that... a theme doesn't really exist. It's directories all the way down. The lang.toml could be in any directory. Which directory should we honor? What if there are multiple themese referenced?
TODO: What if themes themselves want to provide their own translations? Their own en.toml, zh.toml? Where does it go?
ACTUALLY: load has to respect the langCode. So, if langCode is en then lang.en.toml should be searched first, followed by lang.toml. This is so that people who are using custom data to drive menu bars can provide language-specific translations for each menu bar item. That way you don't even need a dedicated lang function anymore, the user just loads a custom toml file as usual. And it will the corresponding toml data in. Then just use $lang.<variable> for your i18n.

[content.toml]
title
by (By <author>)
date (<date>)
tags (Tags: <tags>...)
published (Published <date>)

{{ getEntries .PageContext "" }}

[content.md]
+++
title = "How To Train Your Dragon"
by = "bokwoon"
date = 2010-05-21
published = 2010-05-30
tags: ["python", "", "", ""]
template: "post.html"
+++
Implicit attributes (should the user choose to display them):
- Title
- Date
- Published
- Summary

Plugins can:
- Register data sources. ("github.com/pagemanager/pagemanager.index" is a custom data source)
    - plugin order matters, the first plugin to register a template function name wins.
- Register handlers (for the user to use).
- Copy their templates into the pm-template folder (for the user to use)
- Register a plugin root handler.

A comment plugin can essentially create the comments table, add a function handler

if it's a base file, search in both the current directory then in pm-template

page {
    name
    lastModified
    path
    title
    by
    date
    published
    tags
    summary
}

{{ $ctx := value "ctx" }}
{{ $abc := env "cookie" }}
tmpl.ExecuteEnv(w io.Writer, name string, data any, env map[string]any)
tmpl.ExecuteEnv(w, tmpl.Name(), data, map[string]any{
})

{{ $pages := source "github.com/pagemanager/pagemanager.Pages"
    "-root" "/"
    "-url" route.PathName
    "-descending" "name"
    "-contains" "actor (the sixth sense)"
    "-or" "(contains colors red) (hasSuffix title (Illustrated Guide To))"
}}

{{ $content := load "content.md" }}
{{ with $content.title }}{{ . }}{{ else }}Lorem Ipsum{{ end }}

-ascending ""
-root "posts"
-eq "name abc"
-gt "score 5"
-contains `tags python`
-contains `tags one,two,three` # uses encoding/csv to decode the array

.title
.openingParagraph
.lastModified
.path (includes langCode)
.published
name
by
date
published
tags
summary

-ascending
-descending
-url
-recursive-url
-eq
-gt
-ge
-lt
-le
-contains
Seriously though what the fuck is up with Hugo's interpretation of custom taxonomies. What the fuck are they saying.

{{ source "github.com/pagemanager/pagemanager.Pages" }}

{{ range source "github.com/pagemanager/pagemanager.Pages" "-ascending" "Name" "-root" "abcd" "-eq" "" "" }}
{{ end }}

((I want this string with double brackets))
((opening
closing))
I want this string with no brackets

(((I want this string with double brackets)))
&40;&40;opening
closing&41;&41;
(I want this string with no brackets)

getPages -recursive -sort -filter -tags

{{ $pages := getPages .URL
    "-pathname" "/abcdefg"
    "-recursive"
    "-sort" "name desc, lastModified, title"
}}

If displaying the intro in html, I'd want there to be markup.
But is there a situation where I'd only want the plain text introduction without markup?

&amp; | & | If it doesn't match the &#\d\+; pattern, no need escaping.
&#40; | ( | If parens are balanced, no need escaping.
&#41; | ) | If parens are balanced, no need escaping.
&#46; | $ | If doesn't match the $[a-zA-Z]\+ pattern, no need escaping.

{{ $pages := getPages .URL "-path=/" "-recurse" }}
{{ range $page := $pages }}
{{ end }}

getPages -host bokwoon.github.com -path

plugins can register template commands
plugins can register handler functions
plugins can provide a custom handler under /pm-plugin/github.com/user/repo
    intended for automatic data handling

{{ cmd "index" }}
{{ cmd "github.com/user/repo:funcs" }}

```
How To Train Your Dragon

2010 March 25

Published 2010 March 30

Hiccup, a Viking, must kill a dragon to mark his passage into manhood and be initiated into his tribe. However, he ends up doing the exact opposite by befriending a deadly dragon, Night Fury.
```

pagemanager manager (pmm)
It is a fyne.io application.
It can browse the list of registered plugins at pagemanager.org.
It can automatically download go and git on the user's system.
It can recompile the user's main.go and import.go to produce a runnable binary.
It can run the pagemanager binary and manage its lifecycle (start up, shut down).
If no SQL dsn is provided, it falls back to spinning up an SQLite database in the data directory.
.gitignore: pagemanager.db, pagemanager.exe, pagemanager
